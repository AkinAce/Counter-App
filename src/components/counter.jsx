import React, { Component } from "react"; //Generated using imrc from snipets

class Counter extends React.Component {              //Generated using cc from snipets for conditions or properties
 /* state = {
    count: this.props.value //initializing the value of count. could be any number
    //imageUrl: "https://picsum.photos/200"  //website randomly generates images in 200px
    //tags: ["Tag1", "Tag2", "Tag3"] //Array containing items for a list
  }; */ // deleted while removing local state

  /*renderTags() {   //function for conditional rendering of lists
    if (this.state.tags.length === 0) return <p> There are no tags!</p>; //display when tags array is empty
    return <ul> {this.state.tags.map (tag => <li key={tag}> {tag} </li> ) } </ul>  //otherwise
  }*/

 /* handleIncrement = () =>{                            //Event handling for clicks
    this.setState({ count: this.state.count + 1});     //increases count by 1
  }; */ // deleted while removing local state

  /*handleDecrement = () =>{                            //Event handling for clicks
    this.setState({ count: this.state.count - 1});     //decreases count by 1
  };*/ // deleted while removing local state

  render() {                                       //stuff to be displayed goes in render
    return (
      <div className="row">
        <div className="col-1">
        <span className= {this.getBadgeClasses()}>{this.formatCount()}</span>   {/*curly braces contain javascript expressions. span className points to function to render bootstrap className dynamically*/}
        </div>
        <div className="col ">
        {/*{this.props.children}*/} {/*rendering children in components*/}
        {/*<h1>Hello Akintunde</h1>*/}
        {/* <img src={this.state.imageUrl} alt=""/>*/} {/*dynamically rendering an image*/}
        
        
        <button
          onClick={() => this.props.onIncrement (this.props.counter)}  
          className="btn btn-secondary btn-sm ">
          +</button>      {/*className points to bootsrap css. onClick = event handling*/}  {/*onClick={this.handleIncrement} changed after removing local state*/}

          <button
          onClick={() => this.props.onDecrement (this.props.counter)}
          className="btn btn-secondary btn-sm m-1"
          disabled={this.props.counter.value===0}>
          -</button>  {/*onClick={this.handleDecrement} changed after removing local state*/}
          {/* disabled={this.props.counter.value===0} disables the decrement button when the value is zero, to prevent negative numbers*/}


        <button 
        onClick={() => this.props.onDelete(this.props.id)} 
        className= "btn btn-danger btn-sm  ">
        x</button> {/*Raising an event to execute the onDelete function in child components when clicked*/}

        {/*<ul> {this.state.tags.map (tag => <li key={tag}> {tag} </li> ) } </ul> */} {/* A list element generated by iterating the tags array using map and setting the key of each list item to a tag */}
        {/*{this.state.tags.length === 0 && "Please create a new tag!"}*/}
        {/*{this.renderTags()}*/} {/* calling function for conditional rendering of lists */}
        </div>
            
      </div>
    );
  }

getBadgeClasses(){    //function to define className
  let classes = " badge m-2 ";
  classes += this.props.counter.value === 0 ? "bg-warning" : "bg-primary"; //push warning into the classes if count is 0 and primary if otherwise
  return classes; //this.state.count before removing local state
}

  formatCount() {                               //Regular Javascript function to return "zero" if count is 0 and the value of count if otherwise
    const { value } = this.props.counter;
    return value === 0 ? "0" : value;
  }
}

export default Counter;
